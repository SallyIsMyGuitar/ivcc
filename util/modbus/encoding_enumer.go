// Code generated by "enumer -type Encoding -transform=lower"; DO NOT EDIT.

package modbus

import (
	"fmt"
	"strings"
)

const _EncodingName = "bool8bool16int16int32int64int16nanint32nanint64nanint32suint16uint32uint64uint16nanuint32nanuint64nanuint32sfloat32float32sfloat64"

var _EncodingIndex = [...]uint8{0, 5, 11, 16, 21, 26, 34, 42, 50, 56, 62, 68, 74, 83, 92, 101, 108, 115, 123, 130}

const _EncodingLowerName = "bool8bool16int16int32int64int16nanint32nanint64nanint32suint16uint32uint64uint16nanuint32nanuint64nanuint32sfloat32float32sfloat64"

func (i Encoding) String() string {
	i -= 1
	if i < 0 || i >= Encoding(len(_EncodingIndex)-1) {
		return fmt.Sprintf("Encoding(%d)", i+1)
	}
	return _EncodingName[_EncodingIndex[i]:_EncodingIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EncodingNoOp() {
	var x [1]struct{}
	_ = x[Bool8-(1)]
	_ = x[Bool16-(2)]
	_ = x[Int16-(3)]
	_ = x[Int32-(4)]
	_ = x[Int64-(5)]
	_ = x[Int16NaN-(6)]
	_ = x[Int32NaN-(7)]
	_ = x[Int64NaN-(8)]
	_ = x[Int32S-(9)]
	_ = x[Uint16-(10)]
	_ = x[Uint32-(11)]
	_ = x[Uint64-(12)]
	_ = x[Uint16NaN-(13)]
	_ = x[Uint32NaN-(14)]
	_ = x[Uint64NaN-(15)]
	_ = x[Uint32S-(16)]
	_ = x[Float32-(17)]
	_ = x[Float32S-(18)]
	_ = x[Float64-(19)]
}

var _EncodingValues = []Encoding{Bool8, Bool16, Int16, Int32, Int64, Int16NaN, Int32NaN, Int64NaN, Int32S, Uint16, Uint32, Uint64, Uint16NaN, Uint32NaN, Uint64NaN, Uint32S, Float32, Float32S, Float64}

var _EncodingNameToValueMap = map[string]Encoding{
	_EncodingName[0:5]:          Bool8,
	_EncodingLowerName[0:5]:     Bool8,
	_EncodingName[5:11]:         Bool16,
	_EncodingLowerName[5:11]:    Bool16,
	_EncodingName[11:16]:        Int16,
	_EncodingLowerName[11:16]:   Int16,
	_EncodingName[16:21]:        Int32,
	_EncodingLowerName[16:21]:   Int32,
	_EncodingName[21:26]:        Int64,
	_EncodingLowerName[21:26]:   Int64,
	_EncodingName[26:34]:        Int16NaN,
	_EncodingLowerName[26:34]:   Int16NaN,
	_EncodingName[34:42]:        Int32NaN,
	_EncodingLowerName[34:42]:   Int32NaN,
	_EncodingName[42:50]:        Int64NaN,
	_EncodingLowerName[42:50]:   Int64NaN,
	_EncodingName[50:56]:        Int32S,
	_EncodingLowerName[50:56]:   Int32S,
	_EncodingName[56:62]:        Uint16,
	_EncodingLowerName[56:62]:   Uint16,
	_EncodingName[62:68]:        Uint32,
	_EncodingLowerName[62:68]:   Uint32,
	_EncodingName[68:74]:        Uint64,
	_EncodingLowerName[68:74]:   Uint64,
	_EncodingName[74:83]:        Uint16NaN,
	_EncodingLowerName[74:83]:   Uint16NaN,
	_EncodingName[83:92]:        Uint32NaN,
	_EncodingLowerName[83:92]:   Uint32NaN,
	_EncodingName[92:101]:       Uint64NaN,
	_EncodingLowerName[92:101]:  Uint64NaN,
	_EncodingName[101:108]:      Uint32S,
	_EncodingLowerName[101:108]: Uint32S,
	_EncodingName[108:115]:      Float32,
	_EncodingLowerName[108:115]: Float32,
	_EncodingName[115:123]:      Float32S,
	_EncodingLowerName[115:123]: Float32S,
	_EncodingName[123:130]:      Float64,
	_EncodingLowerName[123:130]: Float64,
}

var _EncodingNames = []string{
	_EncodingName[0:5],
	_EncodingName[5:11],
	_EncodingName[11:16],
	_EncodingName[16:21],
	_EncodingName[21:26],
	_EncodingName[26:34],
	_EncodingName[34:42],
	_EncodingName[42:50],
	_EncodingName[50:56],
	_EncodingName[56:62],
	_EncodingName[62:68],
	_EncodingName[68:74],
	_EncodingName[74:83],
	_EncodingName[83:92],
	_EncodingName[92:101],
	_EncodingName[101:108],
	_EncodingName[108:115],
	_EncodingName[115:123],
	_EncodingName[123:130],
}

// EncodingString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EncodingString(s string) (Encoding, error) {
	if val, ok := _EncodingNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EncodingNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Encoding values", s)
}

// EncodingValues returns all values of the enum
func EncodingValues() []Encoding {
	return _EncodingValues
}

// EncodingStrings returns a slice of all String values of the enum
func EncodingStrings() []string {
	strs := make([]string, len(_EncodingNames))
	copy(strs, _EncodingNames)
	return strs
}

// IsAEncoding returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Encoding) IsAEncoding() bool {
	for _, v := range _EncodingValues {
		if i == v {
			return true
		}
	}
	return false
}
