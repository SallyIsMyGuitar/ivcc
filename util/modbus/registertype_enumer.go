// Code generated by "enumer -type RegisterType -trimprefix RegisterType -transform=lower"; DO NOT EDIT.

package modbus

import (
	"fmt"
	"strings"
)

const _RegisterTypeName = "inputholdingholdingscoilcoils"

var _RegisterTypeIndex = [...]uint8{0, 5, 12, 20, 24, 29}

const _RegisterTypeLowerName = "inputholdingholdingscoilcoils"

func (i RegisterType) String() string {
	i -= 1
	if i < 0 || i >= RegisterType(len(_RegisterTypeIndex)-1) {
		return fmt.Sprintf("RegisterType(%d)", i+1)
	}
	return _RegisterTypeName[_RegisterTypeIndex[i]:_RegisterTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RegisterTypeNoOp() {
	var x [1]struct{}
	_ = x[RegisterTypeInput-(1)]
	_ = x[RegisterTypeHolding-(2)]
	_ = x[RegisterTypeHoldings-(3)]
	_ = x[RegisterTypeCoil-(4)]
	_ = x[RegisterTypeCoils-(5)]
}

var _RegisterTypeValues = []RegisterType{RegisterTypeInput, RegisterTypeHolding, RegisterTypeHoldings, RegisterTypeCoil, RegisterTypeCoils}

var _RegisterTypeNameToValueMap = map[string]RegisterType{
	_RegisterTypeName[0:5]:        RegisterTypeInput,
	_RegisterTypeLowerName[0:5]:   RegisterTypeInput,
	_RegisterTypeName[5:12]:       RegisterTypeHolding,
	_RegisterTypeLowerName[5:12]:  RegisterTypeHolding,
	_RegisterTypeName[12:20]:      RegisterTypeHoldings,
	_RegisterTypeLowerName[12:20]: RegisterTypeHoldings,
	_RegisterTypeName[20:24]:      RegisterTypeCoil,
	_RegisterTypeLowerName[20:24]: RegisterTypeCoil,
	_RegisterTypeName[24:29]:      RegisterTypeCoils,
	_RegisterTypeLowerName[24:29]: RegisterTypeCoils,
}

var _RegisterTypeNames = []string{
	_RegisterTypeName[0:5],
	_RegisterTypeName[5:12],
	_RegisterTypeName[12:20],
	_RegisterTypeName[20:24],
	_RegisterTypeName[24:29],
}

// RegisterTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RegisterTypeString(s string) (RegisterType, error) {
	if val, ok := _RegisterTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RegisterTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RegisterType values", s)
}

// RegisterTypeValues returns all values of the enum
func RegisterTypeValues() []RegisterType {
	return _RegisterTypeValues
}

// RegisterTypeStrings returns a slice of all String values of the enum
func RegisterTypeStrings() []string {
	strs := make([]string, len(_RegisterTypeNames))
	copy(strs, _RegisterTypeNames)
	return strs
}

// IsARegisterType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RegisterType) IsARegisterType() bool {
	for _, v := range _RegisterTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
