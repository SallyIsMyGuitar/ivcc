// Code generated by "enumer -type ParamType -trimprefix Type"; DO NOT EDIT.

package templates

import (
	"fmt"
	"strings"
)

const _ParamTypeName = "StringBoolChargeModesDurationFloatNumberStringList"

var _ParamTypeIndex = [...]uint8{0, 6, 10, 21, 29, 34, 40, 50}

const _ParamTypeLowerName = "stringboolchargemodesdurationfloatnumberstringlist"

func (i ParamType) String() string {
	if i < 0 || i >= ParamType(len(_ParamTypeIndex)-1) {
		return fmt.Sprintf("ParamType(%d)", i)
	}
	return _ParamTypeName[_ParamTypeIndex[i]:_ParamTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ParamTypeNoOp() {
	var x [1]struct{}
	_ = x[TypeString-(0)]
	_ = x[TypeBool-(1)]
	_ = x[TypeChargeModes-(2)]
	_ = x[TypeDuration-(3)]
	_ = x[TypeFloat-(4)]
	_ = x[TypeNumber-(5)]
	_ = x[TypeStringList-(6)]
}

var _ParamTypeValues = []ParamType{TypeString, TypeBool, TypeChargeModes, TypeDuration, TypeFloat, TypeNumber, TypeStringList}

var _ParamTypeNameToValueMap = map[string]ParamType{
	_ParamTypeName[0:6]:        TypeString,
	_ParamTypeLowerName[0:6]:   TypeString,
	_ParamTypeName[6:10]:       TypeBool,
	_ParamTypeLowerName[6:10]:  TypeBool,
	_ParamTypeName[10:21]:      TypeChargeModes,
	_ParamTypeLowerName[10:21]: TypeChargeModes,
	_ParamTypeName[21:29]:      TypeDuration,
	_ParamTypeLowerName[21:29]: TypeDuration,
	_ParamTypeName[29:34]:      TypeFloat,
	_ParamTypeLowerName[29:34]: TypeFloat,
	_ParamTypeName[34:40]:      TypeNumber,
	_ParamTypeLowerName[34:40]: TypeNumber,
	_ParamTypeName[40:50]:      TypeStringList,
	_ParamTypeLowerName[40:50]: TypeStringList,
}

var _ParamTypeNames = []string{
	_ParamTypeName[0:6],
	_ParamTypeName[6:10],
	_ParamTypeName[10:21],
	_ParamTypeName[21:29],
	_ParamTypeName[29:34],
	_ParamTypeName[34:40],
	_ParamTypeName[40:50],
}

// ParamTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ParamTypeString(s string) (ParamType, error) {
	if val, ok := _ParamTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ParamTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ParamType values", s)
}

// ParamTypeValues returns all values of the enum
func ParamTypeValues() []ParamType {
	return _ParamTypeValues
}

// ParamTypeStrings returns a slice of all String values of the enum
func ParamTypeStrings() []string {
	strs := make([]string, len(_ParamTypeNames))
	copy(strs, _ParamTypeNames)
	return strs
}

// IsAParamType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ParamType) IsAParamType() bool {
	for _, v := range _ParamTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
