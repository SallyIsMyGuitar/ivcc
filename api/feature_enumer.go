// Code generated by "enumer -type Feature"; DO NOT EDIT.

package api

import (
	"fmt"
	"strings"
)

const _FeatureName = "HiddenOfflineCoarseCurrentIntegratedDeviceHeating"

var _FeatureIndex = [...]uint8{0, 6, 13, 26, 42, 49}

const _FeatureLowerName = "hiddenofflinecoarsecurrentintegrateddeviceheating"

func (i Feature) String() string {
	i -= 1
	if i < 0 || i >= Feature(len(_FeatureIndex)-1) {
		return fmt.Sprintf("Feature(%d)", i+1)
	}
	return _FeatureName[_FeatureIndex[i]:_FeatureIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FeatureNoOp() {
	var x [1]struct{}
	_ = x[Hidden-(1)]
	_ = x[Offline-(2)]
	_ = x[CoarseCurrent-(3)]
	_ = x[IntegratedDevice-(4)]
	_ = x[Heating-(5)]
}

var _FeatureValues = []Feature{Hidden, Offline, CoarseCurrent, IntegratedDevice, Heating}

var _FeatureNameToValueMap = map[string]Feature{
	_FeatureName[0:6]:        Hidden,
	_FeatureLowerName[0:6]:   Hidden,
	_FeatureName[6:13]:       Offline,
	_FeatureLowerName[6:13]:  Offline,
	_FeatureName[13:26]:      CoarseCurrent,
	_FeatureLowerName[13:26]: CoarseCurrent,
	_FeatureName[26:42]:      IntegratedDevice,
	_FeatureLowerName[26:42]: IntegratedDevice,
	_FeatureName[42:49]:      Heating,
	_FeatureLowerName[42:49]: Heating,
}

var _FeatureNames = []string{
	_FeatureName[0:6],
	_FeatureName[6:13],
	_FeatureName[13:26],
	_FeatureName[26:42],
	_FeatureName[42:49],
}

// FeatureString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FeatureString(s string) (Feature, error) {
	if val, ok := _FeatureNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FeatureNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Feature values", s)
}

// FeatureValues returns all values of the enum
func FeatureValues() []Feature {
	return _FeatureValues
}

// FeatureStrings returns a slice of all String values of the enum
func FeatureStrings() []string {
	strs := make([]string, len(_FeatureNames))
	copy(strs, _FeatureNames)
	return strs
}

// IsAFeature returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Feature) IsAFeature() bool {
	for _, v := range _FeatureValues {
		if i == v {
			return true
		}
	}
	return false
}
