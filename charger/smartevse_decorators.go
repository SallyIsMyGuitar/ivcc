package charger

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decoratesmartEVSE(base *smartEVSE, meter func() (float64, error), chargeRater func() (float64, error), meterEnergy func() (float64, error), phaseCurrents func() (float64, float64, float64, error), phaseVoltages func() (float64, float64, float64, error), phaseSwitcher func(int) error) api.Charger {
	switch {
	case chargeRater == nil && meter == nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages == nil:
		return base

	case chargeRater == nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.Meter
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
		}

	case chargeRater == nil && meter == nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.MeterEnergy
		}{
			smartEVSE: base,
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater == nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.Meter
			api.MeterEnergy
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.MeterEnergy
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
			api.MeterEnergy
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater == nil && meter == nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.PhaseCurrents
		}{
			smartEVSE: base,
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case chargeRater == nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.Meter
			api.PhaseCurrents
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.PhaseCurrents
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
			api.PhaseCurrents
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case chargeRater == nil && meter == nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.MeterEnergy
			api.PhaseCurrents
		}{
			smartEVSE: base,
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case chargeRater == nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.MeterEnergy
			api.PhaseCurrents
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case chargeRater == nil && meter == nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.PhaseVoltages
		}{
			smartEVSE: base,
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater == nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.Meter
			api.PhaseVoltages
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater == nil && meter == nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.MeterEnergy
			api.PhaseVoltages
		}{
			smartEVSE: base,
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater == nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.Meter
			api.MeterEnergy
			api.PhaseVoltages
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.MeterEnergy
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
			api.MeterEnergy
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater == nil && meter == nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			smartEVSE: base,
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater == nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.Meter
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater == nil && meter == nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			smartEVSE: base,
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater == nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher == nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater == nil && meter == nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater == nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.Meter
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater == nil && meter == nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.MeterEnergy
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater == nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.Meter
			api.MeterEnergy
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.MeterEnergy
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
			api.MeterEnergy
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater == nil && meter == nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.PhaseCurrents
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater == nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.Meter
			api.PhaseCurrents
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.PhaseCurrents
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
			api.PhaseCurrents
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater == nil && meter == nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater == nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages == nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseSwitcher
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case chargeRater == nil && meter == nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater == nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.Meter
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy == nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater == nil && meter == nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.MeterEnergy
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater == nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.Meter
			api.MeterEnergy
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.MeterEnergy
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy != nil && phaseCurrents == nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
			api.MeterEnergy
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater == nil && meter == nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.PhaseCurrents
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater == nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.Meter
			api.PhaseCurrents
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.PhaseCurrents
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy == nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
			api.PhaseCurrents
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater == nil && meter == nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater == nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter == nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case chargeRater != nil && meter != nil && meterEnergy != nil && phaseCurrents != nil && phaseSwitcher != nil && phaseVoltages != nil:
		return &struct {
			*smartEVSE
			api.ChargeRater
			api.Meter
			api.MeterEnergy
			api.PhaseCurrents
			api.PhaseSwitcher
			api.PhaseVoltages
		}{
			smartEVSE: base,
			ChargeRater: &decoratesmartEVSEChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decoratesmartEVSEMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decoratesmartEVSEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseCurrents: &decoratesmartEVSEPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decoratesmartEVSEPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			PhaseVoltages: &decoratesmartEVSEPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}
	}

	return nil
}

type decoratesmartEVSEChargeRaterImpl struct {
	chargeRater func() (float64, error)
}

func (impl *decoratesmartEVSEChargeRaterImpl) ChargedEnergy() (float64, error) {
	return impl.chargeRater()
}

type decoratesmartEVSEMeterImpl struct {
	meter func() (float64, error)
}

func (impl *decoratesmartEVSEMeterImpl) CurrentPower() (float64, error) {
	return impl.meter()
}

type decoratesmartEVSEMeterEnergyImpl struct {
	meterEnergy func() (float64, error)
}

func (impl *decoratesmartEVSEMeterEnergyImpl) TotalEnergy() (float64, error) {
	return impl.meterEnergy()
}

type decoratesmartEVSEPhaseCurrentsImpl struct {
	phaseCurrents func() (float64, float64, float64, error)
}

func (impl *decoratesmartEVSEPhaseCurrentsImpl) Currents() (float64, float64, float64, error) {
	return impl.phaseCurrents()
}

type decoratesmartEVSEPhaseSwitcherImpl struct {
	phaseSwitcher func(int) error
}

func (impl *decoratesmartEVSEPhaseSwitcherImpl) Phases1p3p(p0 int) error {
	return impl.phaseSwitcher(p0)
}

type decoratesmartEVSEPhaseVoltagesImpl struct {
	phaseVoltages func() (float64, float64, float64, error)
}

func (impl *decoratesmartEVSEPhaseVoltagesImpl) Voltages() (float64, float64, float64, error) {
	return impl.phaseVoltages()
}
