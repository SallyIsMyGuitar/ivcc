package charger

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateBenderCC(base *BenderCC, meter func() (float64, error), PhaseCurrents func() (float64, float64, float64, error), PhaseVoltages func() (float64, float64, float64, error), chargeRater func() (float64, error), meterEnergy func() (float64, error), identifier func() (string, error)) api.Charger {
	switch {
	case chargeRater == nil && identifier == nil && meter == nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages == nil:
		return base

	case chargeRater == nil && identifier == nil && meter != nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.Meter
		}{
			BenderCC: base,
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
		}

	case chargeRater == nil && identifier == nil && meter == nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.PhaseCurrents
		}{
			BenderCC: base,
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
		}

	case chargeRater == nil && identifier == nil && meter != nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.Meter
			api.PhaseCurrents
		}{
			BenderCC: base,
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
		}

	case chargeRater == nil && identifier == nil && meter == nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.PhaseVoltages
		}{
			BenderCC: base,
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater == nil && identifier == nil && meter != nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.Meter
			api.PhaseVoltages
		}{
			BenderCC: base,
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater == nil && identifier == nil && meter == nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			BenderCC: base,
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater == nil && identifier == nil && meter != nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.Meter
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			BenderCC: base,
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier == nil && meter == nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
		}

	case chargeRater != nil && identifier == nil && meter != nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Meter
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
		}

	case chargeRater != nil && identifier == nil && meter == nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.PhaseCurrents
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
		}

	case chargeRater != nil && identifier == nil && meter != nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Meter
			api.PhaseCurrents
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
		}

	case chargeRater != nil && identifier == nil && meter == nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier == nil && meter != nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Meter
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier == nil && meter == nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier == nil && meter != nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Meter
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater == nil && identifier == nil && meter == nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.MeterEnergy
		}{
			BenderCC: base,
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater == nil && identifier == nil && meter != nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.Meter
			api.MeterEnergy
		}{
			BenderCC: base,
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater == nil && identifier == nil && meter == nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.PhaseCurrents
			api.MeterEnergy
		}{
			BenderCC: base,
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater == nil && identifier == nil && meter != nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.Meter
			api.PhaseCurrents
			api.MeterEnergy
		}{
			BenderCC: base,
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater == nil && identifier == nil && meter == nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater == nil && identifier == nil && meter != nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.Meter
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater == nil && identifier == nil && meter == nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.PhaseCurrents
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater == nil && identifier == nil && meter != nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.Meter
			api.PhaseCurrents
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier == nil && meter == nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.MeterEnergy
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater != nil && identifier == nil && meter != nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Meter
			api.MeterEnergy
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater != nil && identifier == nil && meter == nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.PhaseCurrents
			api.MeterEnergy
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater != nil && identifier == nil && meter != nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Meter
			api.PhaseCurrents
			api.MeterEnergy
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater != nil && identifier == nil && meter == nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier == nil && meter != nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Meter
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier == nil && meter == nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.PhaseCurrents
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier == nil && meter != nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Meter
			api.PhaseCurrents
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater == nil && identifier != nil && meter == nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.Identifier
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
		}

	case chargeRater == nil && identifier != nil && meter != nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.Identifier
			api.Meter
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
		}

	case chargeRater == nil && identifier != nil && meter == nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.Identifier
			api.PhaseCurrents
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
		}

	case chargeRater == nil && identifier != nil && meter != nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.Identifier
			api.Meter
			api.PhaseCurrents
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
		}

	case chargeRater == nil && identifier != nil && meter == nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.Identifier
			api.PhaseVoltages
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater == nil && identifier != nil && meter != nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.Identifier
			api.Meter
			api.PhaseVoltages
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater == nil && identifier != nil && meter == nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.Identifier
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater == nil && identifier != nil && meter != nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier != nil && meter == nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
		}

	case chargeRater != nil && identifier != nil && meter != nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
			api.Meter
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
		}

	case chargeRater != nil && identifier != nil && meter == nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
			api.PhaseCurrents
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
		}

	case chargeRater != nil && identifier != nil && meter != nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
			api.Meter
			api.PhaseCurrents
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
		}

	case chargeRater != nil && identifier != nil && meter == nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier != nil && meter != nil && PhaseCurrents == nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
			api.Meter
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier != nil && meter == nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier != nil && meter != nil && PhaseCurrents != nil && meterEnergy == nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater == nil && identifier != nil && meter == nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.Identifier
			api.MeterEnergy
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater == nil && identifier != nil && meter != nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.Identifier
			api.Meter
			api.MeterEnergy
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater == nil && identifier != nil && meter == nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.Identifier
			api.PhaseCurrents
			api.MeterEnergy
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater == nil && identifier != nil && meter != nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.MeterEnergy
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater == nil && identifier != nil && meter == nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.Identifier
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater == nil && identifier != nil && meter != nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.Identifier
			api.Meter
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater == nil && identifier != nil && meter == nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.Identifier
			api.PhaseCurrents
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater == nil && identifier != nil && meter != nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier != nil && meter == nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
			api.MeterEnergy
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater != nil && identifier != nil && meter != nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
			api.Meter
			api.MeterEnergy
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater != nil && identifier != nil && meter == nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
			api.PhaseCurrents
			api.MeterEnergy
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater != nil && identifier != nil && meter != nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages == nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.MeterEnergy
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater != nil && identifier != nil && meter == nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier != nil && meter != nil && PhaseCurrents == nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
			api.Meter
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier != nil && meter == nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
			api.PhaseCurrents
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}

	case chargeRater != nil && identifier != nil && meter != nil && PhaseCurrents != nil && meterEnergy != nil && PhaseVoltages != nil:
		return &struct {
			*BenderCC
			api.ChargeRater
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.MeterEnergy
			api.PhaseVoltages
		}{
			BenderCC: base,
			ChargeRater: &decorateBenderCCChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Identifier: &decorateBenderCCIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateBenderCCMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateBenderCCPhaseCurrentsImpl{
				PhaseCurrents: PhaseCurrents,
			},
			MeterEnergy: &decorateBenderCCMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			PhaseVoltages: &decorateBenderCCPhaseVoltagesImpl{
				PhaseVoltages: PhaseVoltages,
			},
		}
	}

	return nil
}

type decorateBenderCCChargeRaterImpl struct {
	chargeRater func() (float64, error)
}

func (impl *decorateBenderCCChargeRaterImpl) ChargedEnergy() (float64, error) {
	return impl.chargeRater()
}

type decorateBenderCCIdentifierImpl struct {
	identifier func() (string, error)
}

func (impl *decorateBenderCCIdentifierImpl) Identify() (string, error) {
	return impl.identifier()
}

type decorateBenderCCMeterImpl struct {
	meter func() (float64, error)
}

func (impl *decorateBenderCCMeterImpl) CurrentPower() (float64, error) {
	return impl.meter()
}

type decorateBenderCCPhaseCurrentsImpl struct {
	PhaseCurrents func() (float64, float64, float64, error)
}

func (impl *decorateBenderCCPhaseCurrentsImpl) Currents() (float64, float64, float64, error) {
	return impl.PhaseCurrents()
}

type decorateBenderCCMeterEnergyImpl struct {
	meterEnergy func() (float64, error)
}

func (impl *decorateBenderCCMeterEnergyImpl) TotalEnergy() (float64, error) {
	return impl.meterEnergy()
}

type decorateBenderCCPhaseVoltagesImpl struct {
	PhaseVoltages func() (float64, float64, float64, error)
}

func (impl *decorateBenderCCPhaseVoltagesImpl) Voltages() (float64, float64, float64, error) {
	return impl.PhaseVoltages()
}
