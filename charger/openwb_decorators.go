package charger

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateOpenWB(base *OpenWB, phaseController func(int) error, battery func() (float64, error)) api.Charger {
	switch {
	case battery == nil && phaseController == nil:
		return base

	case battery == nil && phaseController != nil:
		return &struct {
			*OpenWB
			api.PhaseController
		}{
			OpenWB: base,
			PhaseController: &decorateOpenWBPhaseControllerImpl{
				phaseController: phaseController,
			},
		}

	case battery != nil && phaseController == nil:
		return &struct {
			*OpenWB
			api.Battery
		}{
			OpenWB: base,
			Battery: &decorateOpenWBBatteryImpl{
				battery: battery,
			},
		}

	case battery != nil && phaseController != nil:
		return &struct {
			*OpenWB
			api.Battery
			api.PhaseController
		}{
			OpenWB: base,
			Battery: &decorateOpenWBBatteryImpl{
				battery: battery,
			},
			PhaseController: &decorateOpenWBPhaseControllerImpl{
				phaseController: phaseController,
			},
		}
	}

	return nil
}

type decorateOpenWBBatteryImpl struct {
	battery func() (float64, error)
}

func (impl *decorateOpenWBBatteryImpl) Soc() (float64, error) {
	return impl.battery()
}

type decorateOpenWBPhaseControllerImpl struct {
	phaseController func(int) error
}

func (impl *decorateOpenWBPhaseControllerImpl) Phases1p3p(p0 int) error {
	return impl.phaseController(p0)
}
