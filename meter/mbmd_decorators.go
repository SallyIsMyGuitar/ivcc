package meter

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateModbusMbmd(base api.Meter, meterEnergy func() (float64, error), phaseCurrents func() (float64, float64, float64, error), phaseVoltages func() (float64, float64, float64, error), phasePowers func() (float64, float64, float64, error), battery func() (float64, error), batteryCapacity func() float64) api.Meter {
	switch {
	case battery == nil && batteryCapacity == nil && meterEnergy == nil && phaseCurrents == nil && phasePowers == nil && phaseVoltages == nil:
		return base

	case battery != nil && batteryCapacity == nil && meterEnergy == nil && phaseCurrents == nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
		}{
			Meter: base,
			Battery: &decorateModbusMbmdBatteryImpl{
				battery: battery,
			},
		}

	case battery != nil && batteryCapacity != nil && meterEnergy == nil && phaseCurrents == nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
		}{
			Meter: base,
			Battery: &decorateModbusMbmdBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateModbusMbmdBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
		}
	}

	return nil
}

type decorateModbusMbmdBatteryImpl struct {
	battery func() (float64, error)
}

func (impl *decorateModbusMbmdBatteryImpl) Soc() (float64, error) {
	return impl.battery()
}

type decorateModbusMbmdBatteryCapacityImpl struct {
	batteryCapacity func() float64
}

func (impl *decorateModbusMbmdBatteryCapacityImpl) Capacity() float64 {
	return impl.batteryCapacity()
}

type decorateModbusMbmdMeterEnergyImpl struct {
	meterEnergy func() (float64, error)
}

func (impl *decorateModbusMbmdMeterEnergyImpl) TotalEnergy() (float64, error) {
	return impl.meterEnergy()
}

type decorateModbusMbmdPhaseCurrentsImpl struct {
	phaseCurrents func() (float64, float64, float64, error)
}

func (impl *decorateModbusMbmdPhaseCurrentsImpl) Currents() (float64, float64, float64, error) {
	return impl.phaseCurrents()
}

type decorateModbusMbmdPhasePowersImpl struct {
	phasePowers func() (float64, float64, float64, error)
}

func (impl *decorateModbusMbmdPhasePowersImpl) Powers() (float64, float64, float64, error) {
	return impl.phasePowers()
}

type decorateModbusMbmdPhaseVoltagesImpl struct {
	phaseVoltages func() (float64, float64, float64, error)
}

func (impl *decorateModbusMbmdPhaseVoltagesImpl) Voltages() (float64, float64, float64, error) {
	return impl.phaseVoltages()
}
