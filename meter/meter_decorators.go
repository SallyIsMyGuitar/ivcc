package meter

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateMeter(base api.Meter, meterEnergy func() (float64, error), meterCurrent func() (float64, float64, float64, error), meterVoltage func() (float64, float64, float64, error), meterPower func() (float64, float64, float64, error), battery func() (float64, error)) api.Meter {
	switch {
	case battery == nil && meterCurrent == nil && meterEnergy == nil && meterPower == nil && meterVoltage == nil:
		return base

	case battery == nil && meterCurrent == nil && meterEnergy != nil && meterPower == nil && meterVoltage == nil:
		return &struct {
			api.Meter
			api.MeterEnergy
		}{
			Meter: base,
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case battery == nil && meterCurrent != nil && meterEnergy == nil && meterPower == nil && meterVoltage == nil:
		return &struct {
			api.Meter
			api.MeterCurrent
		}{
			Meter: base,
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
		}

	case battery == nil && meterCurrent != nil && meterEnergy != nil && meterPower == nil && meterVoltage == nil:
		return &struct {
			api.Meter
			api.MeterCurrent
			api.MeterEnergy
		}{
			Meter: base,
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case battery == nil && meterCurrent == nil && meterEnergy == nil && meterPower == nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.MeterVoltage
		}{
			Meter: base,
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}

	case battery == nil && meterCurrent == nil && meterEnergy != nil && meterPower == nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.MeterEnergy
			api.MeterVoltage
		}{
			Meter: base,
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}

	case battery == nil && meterCurrent != nil && meterEnergy == nil && meterPower == nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.MeterCurrent
			api.MeterVoltage
		}{
			Meter: base,
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}

	case battery == nil && meterCurrent != nil && meterEnergy != nil && meterPower == nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.MeterCurrent
			api.MeterEnergy
			api.MeterVoltage
		}{
			Meter: base,
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}

	case battery == nil && meterCurrent == nil && meterEnergy == nil && meterPower != nil && meterVoltage == nil:
		return &struct {
			api.Meter
			api.MeterPower
		}{
			Meter: base,
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
		}

	case battery == nil && meterCurrent == nil && meterEnergy != nil && meterPower != nil && meterVoltage == nil:
		return &struct {
			api.Meter
			api.MeterEnergy
			api.MeterPower
		}{
			Meter: base,
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
		}

	case battery == nil && meterCurrent != nil && meterEnergy == nil && meterPower != nil && meterVoltage == nil:
		return &struct {
			api.Meter
			api.MeterCurrent
			api.MeterPower
		}{
			Meter: base,
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
		}

	case battery == nil && meterCurrent != nil && meterEnergy != nil && meterPower != nil && meterVoltage == nil:
		return &struct {
			api.Meter
			api.MeterCurrent
			api.MeterEnergy
			api.MeterPower
		}{
			Meter: base,
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
		}

	case battery == nil && meterCurrent == nil && meterEnergy == nil && meterPower != nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.MeterPower
			api.MeterVoltage
		}{
			Meter: base,
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}

	case battery == nil && meterCurrent == nil && meterEnergy != nil && meterPower != nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.MeterEnergy
			api.MeterPower
			api.MeterVoltage
		}{
			Meter: base,
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}

	case battery == nil && meterCurrent != nil && meterEnergy == nil && meterPower != nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.MeterCurrent
			api.MeterPower
			api.MeterVoltage
		}{
			Meter: base,
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}

	case battery == nil && meterCurrent != nil && meterEnergy != nil && meterPower != nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.MeterCurrent
			api.MeterEnergy
			api.MeterPower
			api.MeterVoltage
		}{
			Meter: base,
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}

	case battery != nil && meterCurrent == nil && meterEnergy == nil && meterPower == nil && meterVoltage == nil:
		return &struct {
			api.Meter
			api.Battery
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
		}

	case battery != nil && meterCurrent == nil && meterEnergy != nil && meterPower == nil && meterVoltage == nil:
		return &struct {
			api.Meter
			api.Battery
			api.MeterEnergy
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case battery != nil && meterCurrent != nil && meterEnergy == nil && meterPower == nil && meterVoltage == nil:
		return &struct {
			api.Meter
			api.Battery
			api.MeterCurrent
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
		}

	case battery != nil && meterCurrent != nil && meterEnergy != nil && meterPower == nil && meterVoltage == nil:
		return &struct {
			api.Meter
			api.Battery
			api.MeterCurrent
			api.MeterEnergy
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case battery != nil && meterCurrent == nil && meterEnergy == nil && meterPower == nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.Battery
			api.MeterVoltage
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}

	case battery != nil && meterCurrent == nil && meterEnergy != nil && meterPower == nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.Battery
			api.MeterEnergy
			api.MeterVoltage
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}

	case battery != nil && meterCurrent != nil && meterEnergy == nil && meterPower == nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.Battery
			api.MeterCurrent
			api.MeterVoltage
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}

	case battery != nil && meterCurrent != nil && meterEnergy != nil && meterPower == nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.Battery
			api.MeterCurrent
			api.MeterEnergy
			api.MeterVoltage
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}

	case battery != nil && meterCurrent == nil && meterEnergy == nil && meterPower != nil && meterVoltage == nil:
		return &struct {
			api.Meter
			api.Battery
			api.MeterPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
		}

	case battery != nil && meterCurrent == nil && meterEnergy != nil && meterPower != nil && meterVoltage == nil:
		return &struct {
			api.Meter
			api.Battery
			api.MeterEnergy
			api.MeterPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
		}

	case battery != nil && meterCurrent != nil && meterEnergy == nil && meterPower != nil && meterVoltage == nil:
		return &struct {
			api.Meter
			api.Battery
			api.MeterCurrent
			api.MeterPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
		}

	case battery != nil && meterCurrent != nil && meterEnergy != nil && meterPower != nil && meterVoltage == nil:
		return &struct {
			api.Meter
			api.Battery
			api.MeterCurrent
			api.MeterEnergy
			api.MeterPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
		}

	case battery != nil && meterCurrent == nil && meterEnergy == nil && meterPower != nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.Battery
			api.MeterPower
			api.MeterVoltage
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}

	case battery != nil && meterCurrent == nil && meterEnergy != nil && meterPower != nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.Battery
			api.MeterEnergy
			api.MeterPower
			api.MeterVoltage
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}

	case battery != nil && meterCurrent != nil && meterEnergy == nil && meterPower != nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.Battery
			api.MeterCurrent
			api.MeterPower
			api.MeterVoltage
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}

	case battery != nil && meterCurrent != nil && meterEnergy != nil && meterPower != nil && meterVoltage != nil:
		return &struct {
			api.Meter
			api.Battery
			api.MeterCurrent
			api.MeterEnergy
			api.MeterPower
			api.MeterVoltage
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MeterCurrent: &decorateMeterMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateMeterMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
			MeterPower: &decorateMeterMeterPowerImpl{
				meterPower: meterPower,
			},
			MeterVoltage: &decorateMeterMeterVoltageImpl{
				meterVoltage: meterVoltage,
			},
		}
	}

	return nil
}

type decorateMeterBatteryImpl struct {
	battery func() (float64, error)
}

func (impl *decorateMeterBatteryImpl) Soc() (float64, error) {
	return impl.battery()
}

type decorateMeterMeterCurrentImpl struct {
	meterCurrent func() (float64, float64, float64, error)
}

func (impl *decorateMeterMeterCurrentImpl) Currents() (float64, float64, float64, error) {
	return impl.meterCurrent()
}

type decorateMeterMeterEnergyImpl struct {
	meterEnergy func() (float64, error)
}

func (impl *decorateMeterMeterEnergyImpl) TotalEnergy() (float64, error) {
	return impl.meterEnergy()
}

type decorateMeterMeterPowerImpl struct {
	meterPower func() (float64, float64, float64, error)
}

func (impl *decorateMeterMeterPowerImpl) Powers() (float64, float64, float64, error) {
	return impl.meterPower()
}

type decorateMeterMeterVoltageImpl struct {
	meterVoltage func() (float64, float64, float64, error)
}

func (impl *decorateMeterMeterVoltageImpl) Voltages() (float64, float64, float64, error) {
	return impl.meterVoltage()
}
