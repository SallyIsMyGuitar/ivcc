// Code generated by "enumer -type BatteryControl -trimprefix BatteryControl -transform=lower"; DO NOT EDIT.

package site

import (
	"fmt"
	"strings"
)

const _BatteryControlName = "disableddischargechargeenabled"

var _BatteryControlIndex = [...]uint8{0, 8, 17, 23, 30}

const _BatteryControlLowerName = "disableddischargechargeenabled"

func (i BatteryControl) String() string {
	if i < 0 || i >= BatteryControl(len(_BatteryControlIndex)-1) {
		return fmt.Sprintf("BatteryControl(%d)", i)
	}
	return _BatteryControlName[_BatteryControlIndex[i]:_BatteryControlIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BatteryControlNoOp() {
	var x [1]struct{}
	_ = x[BatteryControlDisabled-(0)]
	_ = x[BatteryControlDischarge-(1)]
	_ = x[BatteryControlCharge-(2)]
	_ = x[BatteryControlEnabled-(3)]
}

var _BatteryControlValues = []BatteryControl{BatteryControlDisabled, BatteryControlDischarge, BatteryControlCharge, BatteryControlEnabled}

var _BatteryControlNameToValueMap = map[string]BatteryControl{
	_BatteryControlName[0:8]:        BatteryControlDisabled,
	_BatteryControlLowerName[0:8]:   BatteryControlDisabled,
	_BatteryControlName[8:17]:       BatteryControlDischarge,
	_BatteryControlLowerName[8:17]:  BatteryControlDischarge,
	_BatteryControlName[17:23]:      BatteryControlCharge,
	_BatteryControlLowerName[17:23]: BatteryControlCharge,
	_BatteryControlName[23:30]:      BatteryControlEnabled,
	_BatteryControlLowerName[23:30]: BatteryControlEnabled,
}

var _BatteryControlNames = []string{
	_BatteryControlName[0:8],
	_BatteryControlName[8:17],
	_BatteryControlName[17:23],
	_BatteryControlName[23:30],
}

// BatteryControlString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BatteryControlString(s string) (BatteryControl, error) {
	if val, ok := _BatteryControlNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BatteryControlNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BatteryControl values", s)
}

// BatteryControlValues returns all values of the enum
func BatteryControlValues() []BatteryControl {
	return _BatteryControlValues
}

// BatteryControlStrings returns a slice of all String values of the enum
func BatteryControlStrings() []string {
	strs := make([]string, len(_BatteryControlNames))
	copy(strs, _BatteryControlNames)
	return strs
}

// IsABatteryControl returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BatteryControl) IsABatteryControl() bool {
	for _, v := range _BatteryControlValues {
		if i == v {
			return true
		}
	}
	return false
}
